{{- $additionalInitContainers := (include "keycloak-internal.customization.initContainers" $) }}
{{- $additionalSidecarContainers := (include "keycloak-internal.customization.sidecarContainers" $) }}
{{- $additionalVolumes := (include "keycloak-internal.customization.volumes" $) }}
{{- $additionalVolumeMounts := (include "keycloak-internal.customization.volumeMounts" $) }}
{{- $additionalEnv := (include "keycloak-internal.customization.env" $) }}
{{- $additionalEnvFrom := (include "keycloak-internal.customization.envFrom" $) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak-internal-deployment
  labels:
    {{- include "keycloak-internal.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "keycloak-internal.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "keycloak-internal.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- include "keycloak-internal.imagePullSecrets" . | indent 6 }}
      {{- if .Values.podSecurityContext }}
      securityContext: {{- .Values.podSecurityContext | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        - name: init-theme
          image: {{ include "keycloak-internal.theme.image" . }}
          imagePullPolicy: {{ .Values.theme.image.pullPolicy }}
          {{- if .Values.theme.image.resources }}
          resources: {{- toYaml .Values.theme.image.resources | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
            - -c
            - |
              cp -a /themes/. /data/
          volumeMounts:
            - mountPath: /data
              name: ephemeral
        {{- if $additionalInitContainers }}
          {{- $additionalInitContainers | nindent 8 }}
        {{- end }}
      containers:
        - name: keycloak-internal
          image: {{ include "keycloak-internal.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: {{- toYaml .Values.keycloak.args | nindent 12 }}
          env:
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: username
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: password
            - name: KC_HOSTNAME_STRICT
              value: {{ .Values.keycloak.hostnameStrict | quote }}
            - name: KC_HOSTNAME_STRICT_HTTPS
              value: {{ .Values.keycloak.hostnameStrictHttps | quote }}
            - name: JAVA_OPTS_APPEND
              value: "-Djgroups.dns.query=keycloak-service-internal-headless"
            - name: KC_PROXY
              value: {{ .Values.keycloak.proxy | quote }}
            - name: KC_HTTP_PORT
              value: {{ .Values.service.port | quote }}
            - name: KC_HTTP_ENABLED
              value: {{ .Values.keycloak.httpEnabled | quote }}
            - name: PROXY_ADDRESS_FORWARDING
              value: {{ .Values.keycloak.proxyAddressForwarding | quote }}
            - name: KC_DB_SCHEMA
              value: {{ .Values.keycloak.dbSchema | quote }}
            # KC_DB_* env variables are needed for Keycloak
            - name: KC_DB_URL
              value: {{ include "czertainly-lib.util.format.jdbcUrl" (list . "?characterEncoding=UTF-8") | quote }}
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_user
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_password
            - name: KC_LOG_LEVEL
              value: {{ .Values.logging.level | quote }}
            # PG* env variables are needed for psql command which is needed for postStart command
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_host
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_port
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_name
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_user
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_password
            {{- if $additionalEnv }}
              {{- $additionalEnv | nindent 12 }}
            {{- end }}
          {{- if $additionalEnvFrom }}
          envFrom:
            {{- $additionalEnvFrom | indent 12 }}
          {{- end }}
          {{- if .Values.createDbSchema }}
          lifecycle:
            postStart:
              exec:
                command:
                  - "/bin/sh"
                  - "/opt/keycloak/create_schema.sh"
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: "TCP"
          {{- if .Values.image.securityContext }}
          securityContext: {{- .Values.image.securityContext | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.image.probes.liveness.enabled }}
          livenessProbe:
            {{- if .Values.image.probes.liveness.custom }}
            {{- toYaml .Values.image.probes.liveness.custom | nindent 12 }}
            {{- else }}
            httpGet:
              path: {{ .Values.keycloak.httpRelativePath }}/
              port: http
            {{- end }}
            initialDelaySeconds: {{ .Values.image.probes.liveness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.image.probes.liveness.timeoutSeconds }}
            periodSeconds: {{ .Values.image.probes.liveness.periodSeconds }}
            successThreshold: {{ .Values.image.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.image.probes.liveness.failureThreshold }}
          {{- end }}
          {{- if .Values.image.probes.readiness.enabled }}
          readinessProbe:
            {{- if .Values.image.probes.readiness.custom }}
            {{- toYaml .Values.image.probes.readiness.custom | nindent 12 }}
            {{- else }}
            httpGet:
              path: {{ .Values.keycloak.httpRelativePath }}/realms/master
              port: http
            {{- end }}
            initialDelaySeconds: {{ .Values.image.probes.readiness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.image.probes.readiness.timeoutSeconds }}
            periodSeconds: {{ .Values.image.probes.readiness.periodSeconds }}
            successThreshold: {{ .Values.image.probes.readiness.successThreshold }}
            failureThreshold: {{ .Values.image.probes.readiness.failureThreshold }}
          {{- end }}
          {{- if .Values.image.probes.startup.enabled }}
          startupProbe:
            {{- if .Values.image.probes.startup.custom }}
            {{- toYaml .Values.image.probes.startup.custom | nindent 12 }}
            {{- else }}
            httpGet:
              path: {{ .Values.keycloak.httpRelativePath }}/realms/master
              port: http
            {{- end }}
            initialDelaySeconds: {{ .Values.image.probes.startup.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.image.probes.startup.timeoutSeconds }}
            periodSeconds: {{ .Values.image.probes.startup.periodSeconds }}
            successThreshold: {{ .Values.image.probes.startup.successThreshold }}
            failureThreshold: {{ .Values.image.probes.startup.failureThreshold }}
          {{- end }}
          {{- if .Values.image.resources }}
          resources: {{- toYaml .Values.image.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /opt/keycloak/data
              name: ephemeral
            - name: keycloak-internal-configmap-volume
              mountPath: /opt/keycloak/data/import/czertainly_realm.json
              subPath: czertainly_realm.json
            - name: keycloak-internal-configmap-volume
              mountPath: /opt/keycloak/create_schema.sh
              subPath: create_schema.sh
            - mountPath: /opt/keycloak/themes
              name: ephemeral
            - mountPath: /opt/keycloak/data/tmp
              name: ephemeral
            - mountPath: /tmp
              name: ephemeral
            {{- if or .Values.global.trusted.certificates .Values.trusted.certificates }}
            - name: trusted-certificates-volume
              mountPath: /opt/keycloak/conf/truststores/trusted_cas.pem
              subPath: ca.crt
              readOnly: true
            {{- end }}
            {{- if $additionalVolumeMounts }}
              {{- $additionalVolumeMounts | nindent 12 }}
            {{- end }}
        {{- if $additionalSidecarContainers }}
          {{- $additionalSidecarContainers | nindent 8 }}
        {{- end }}
      volumes:
        - name: keycloak-internal-configmap-volume
          configMap:
            name: keycloak-internal-configmap
            items:
              - key: czertainly_realm.json
                path: czertainly_realm.json
              - key: create_schema.sh
                path: create_schema.sh
        - name: ephemeral
          {{- include "keycloak-internal.ephemeralVolume" . | indent 10 }}
        {{- if .Values.global.trusted.certificates }}
        - name: trusted-certificates-volume
          secret:
            defaultMode: 420
            secretName: trusted-certificates
        {{- else if .Values.trusted.certificates }}
        - name: trusted-certificates-volume
          secret:
            defaultMode: 420
            secretName: trusted-certificates-{{ .Chart.Name | lower }}
        {{- end }}
        {{- if $additionalVolumes }}
          {{- $additionalVolumes | nindent 8 }}
        {{- end }}
