# Default values for keycloak-internal.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global parameters that will overwrite local parameters
global:
  image:
    registry: ""
    repository: ""
    # array of secret names
    pullSecrets: []
  volumes:
    ephemeral:
      type: ""
      sizeLimit: ""
      storageClassName: ""
      custom: {}
  database:
    type: ""
    host: ""
    port: ""
    name: ""
    username: ""
    password: ""
  trusted:
    certificates: ""
  hostName: ""
  keycloak:
    clientSecret: ""
  admin:
    username: ""
    password: ""
    name: ""
    surname: ""
    email: ""
  # additional init containers that will be added to each pod
  # - name: some-image
  #   image: some-image
  #   imagePullPolicy: IfNotPresent
  #   securityContext:
  #     runAsNonRoot: true
  #   ports:
  #     - name: port
  #       containerPort: "{{ $.Values.container.port }}"
  initContainers: []
  # additional sidecar containers that will be added to each pod
  # see the sample of init containers above
  sidecarContainers: []
  # additional volumes that will be added to each pod
  # - name: additional-volume
  #   configMap:
  #     name: additional-volume
  additionalVolumes: []
  # additional volume mounts that will be added to each pod
  # - name: additional-volume
  #   mountPath: /opt/app
  #   readOnly: true
  additionalVolumeMounts: []
  # additional service ports that will be added to each pod
  # - name: other-port
  #   port: 8080
  #   targetPort: 8080
  additionalPorts: []
  # additional environment variables that will be added to each pod
  additionalEnv:
    # - name: SOME_ENV
    #   value: "some-value"
    variables: []
    # list of config maps to be added as environment variables
    configMaps: []
    # list of secrets to be added as environment variables
    secrets: []

database:
  # currently only postgresql is supported
  type: "postgresql"
  host: "host.docker.internal"
  port: 5432
  name: "czertainlydb"
  username: "czertainlyuser"
  password: "your-strong-password"
httpProxy: ""
httpsProxy: ""
noProxy: ""

trusted:
  certificates: ""

nameOverride: ""
fullnameOverride: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
replicaCount: 1

service:
  type: "ClusterIP"
  port: 8080

image:
  # default registry name
  registry: docker.io
  repository: 3keycompany
  name: czertainly-keycloak-optimized
  tag: 24.0.2-0
  # the digest to be used instead of the tag
  digest: ""
  pullPolicy: IfNotPresent
  # array of secret names
  pullSecrets: []
  # default security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: true
  # probes configuration
  probes:
    liveness:
      enabled: false
      # custom probe command, will override the default one
      custom: {}
      initialDelaySeconds: 30
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    readiness:
      enabled: true
      # custom probe command, will override the default one
      custom: {}
      initialDelaySeconds: 30
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    startup:
      enabled: true
      # custom probe command, will override the default one
      custom: {}
      initialDelaySeconds: 15
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 45
  resources: {}
    # We follow recommendations and general guidelines to manage resources from:
    # https://master.sdk.operatorframework.io/docs/best-practices/managing-resources/
    # We recommend default requests for CPU and Memory, leaving the limits as a conscious
    # choice for the user. If you do want to specify your own resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources'.
    # requests:
    #   cpu: 100m
    #   memory: 600M
    # limits: {}

theme:
  image:
    # default registry name
    registry: docker.io
    repository: czertainly
    name: czertainly-keycloak-theme
    tag: 0.1.2
    # the digest to be used instead of the tag
    digest: ""
    pullPolicy: IfNotPresent
    # array of secret names
    pullSecrets: []
    # default security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 10001
      readOnlyRootFilesystem: true
    # We follow recommendations and general guidelines to manage resources from:
    # https://master.sdk.operatorframework.io/docs/best-practices/managing-resources/
    # We recommend default requests for CPU and Memory, leaving the limits as a conscious
    # choice for the user. If you do want to specify your own resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources'.
    # requests:
    #   cpu: 20m
    #   memory: 64Mi
    # limits: {}
    resources: {}

# customization of the chart
initContainers: []
sidecarContainers: []
additionalVolumes: []
additionalVolumeMounts: []
additionalPorts: []
additionalEnv:
  variables: []
  configMaps: []
  secrets: []

volumes:
  ephemeral:
    # available types are: memory, storage, custom
    type: memory
    sizeLimit: "10Mi"
    storageClassName: ""
    custom: {}
    #  emptyDir:
    #    sizeLimit: "10Mi"
    #    medium: "Memory"

# see https://www.keycloak.org/server/logging
logging:
  level: "INFO"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "keycloak-internal-sa"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

nodeSelector: {}

tolerations: []

affinity: {}

# https://www.keycloak.org/server/all-config
keycloak:
  dbSchema: "keycloak"
  # this is admin user for the Keycloak instance master realm
  admin:
    username: "admin"
    password: "admin"
  # the arguments passed to the entrypoint in the Keycloak container
  args: [start, --optimized, --import-realm]
  hostnameStrict: false
  hostnameStrictHttps: false
  # cacheStack is set by the optimized build to kubernetes
  # cacheStack: "kubernetes"
  # relative path is important to run behind a reverse proxy
  # it is set to "/kc" by the optimized build
  # do not change this value if you are using the optimized build
  httpRelativePath: "/kc"
  httpEnabled: true
  # none, edge, reencrypt, passthrough
  proxy: "edge"
  proxyAddressForwarding: true

# configuration of the CZERTAINLY realm including kong as client for OIDC
czertainly:
  admin:
    username: "czertainly-admin"
    password: "your-strong-password"
    name: "admin"
    surname: "czertainly"
    email: "admin@czertainly.local"
  # hostname is used as the Root URL for the OIDC configuration
  hostName: "czertainly.local"
  # OIDC client secret, it should be also configured for the client in Kong
  # it is 32 bytes long value, base64 encoded, for example s0qKH5qItTWoxpBt7Zrj348ZhZ7woAbk
  clientSecret: "secret"
  redirectUri:
    login: "/login/"
    postLogout: "/administrator/"

# deploy simple postStart hook to create keycloak schema in database
createDbSchema: true
