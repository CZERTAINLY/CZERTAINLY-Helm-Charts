name: Publish Charts
on:
  push:
    branches: [ main ]
    tags:
      - '*'

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest

    env:
      BRANCH: main

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.10.0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Detect Changed Charts
        id: detect-changes
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "üì¶ Detected tag push: $GITHUB_REF"

            # Get previous tag
            last_tag=$(git for-each-ref --sort=-creatordate --count=2 --format="%(refname:short)" "refs/tags/*" | sed -n '2p')
            echo "Last tag: $last_tag"
            echo "last_tag=$last_tag" >> $GITHUB_ENV

            changed=$(ct list-changed --target-branch "$BRANCH" --since "$last_tag")
          else
            echo "üîÄ Detected branch push (likely a merge)"
            changed=$(ct list-changed --target-branch "$BRANCH" --since HEAD^1)
          fi
          
          echo "${changed}"
          
          if [[ -n "$changed" ]]; then
            echo "‚úÖ Charts changed"
            echo "changed=true" >> $GITHUB_ENV

            echo "changed_charts<<EOF" >> $GITHUB_ENV
            echo "$changed" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "‚ÑπÔ∏è No chart changes detected"
            echo "changed=false" >> $GITHUB_ENV
          fi

      - name: Skip checking when no charts changed
        if: env.changed != 'true'
        run: echo "No chart changes detected ‚Äî skipping checks." && exit 0

      - name: Check for Development Versions
        if: env.changed == 'true' && github.ref_type == 'branch'
        env:
          changed_charts: ${{ env.changed_charts }}
        run: |
          for CHART in $changed_charts; do
            echo "üîç Checking chart $CHART for development version"
            version=$(yq ".version" < "${CHART}/Chart.yaml")
            if [[ $version != *-develop ]]; then
              echo "‚ùå Chart $CHART has version '$version' but should be a development version (*-develop)"
              exit 1
            fi
          done

      - name: Check for Release Versions
        if: env.changed == 'true' && github.ref_type == 'tag'
        env:
          changed_charts: ${{ env.changed_charts }}
        run: |
          for CHART in $changed_charts; do
            echo "üîç Checking chart $CHART for release-ready version"
            version=$(yq ".version" < "${CHART}/Chart.yaml")
            if [[ $version == *-develop ]]; then
              echo "‚ùå Chart $CHART has development version '$version' in a release branch"
              exit 1
            fi
          done

      - name: Run chart-testing (lint)
        if: env.changed == 'true'
        env:
          last_tag: ${{ env.last_tag }}
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            ct lint --target-branch "$BRANCH" --since $last_tag --check-version-increment=false
          else
            ct lint --target-branch "$BRANCH" --since HEAD^1 --check-version-increment=false
          fi

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.0.0'

      - name: Publish charts
        if: env.changed == 'true'
        env:
          changed_charts: ${{ env.changed_charts }}
          HELM_OCI_REGISTRY: ${{ secrets.HELM_OCI_REGISTRY }}
          HELM_OCI_REPOSITORY: ${{ secrets.HELM_OCI_REPOSITORY }}
          HELM_USERNAME: ${{ secrets.HARBOR_3KEY_USERNAME }}
          HELM_PASSWORD: ${{ secrets.HARBOR_3KEY_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
        run: |
          echo "Logging in to $HELM_OCI_REGISTRY"
          helm registry login $HELM_OCI_REGISTRY --username $HELM_USERNAME --password $HELM_PASSWORD
          
          cosign login $HELM_OCI_REGISTRY --username $HELM_USERNAME --password $HELM_PASSWORD
          
          release_chart(){
            CHART=$1
            
            name=$(yq ".name" < ${CHART}/Chart.yaml)
            version=$(yq ".version" < ${CHART}/Chart.yaml)
          
            echo "Releasing chart $CHART with version $version"
          
            helm dependency update $CHART
            helm package $CHART
            pushed=$(helm push $name-$version.tgz oci://$HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY)
          
            digest=$(echo "$pushed" | awk 'FNR == 2 {print $2}')
          
            cosign sign --yes --key env://COSIGN_PRIVATE_KEY $HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY/$name@$digest
          
            echo "Chart $name-$version pushed"
            
            # create develop tag 0.0.0 only in case of branch push
            if [[ "${{ github.ref_type }}" == "branch" ]]; then
              # SPECIFIC TO HARBOR
              echo "Check if develop tag 0.0.0 exists and remove it"
              pulled=$(helm pull oci://$HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY/$name --version 0.0.0 2>&1)
              if [[ $pulled == *"Digest:"* ]]; then
                removeFrom=$(echo "$pulled" | awk 'FNR == 2 {print $2}')
                echo "Tag 0.0.0 exists, remove it from $removeFrom"
                curl --user $HELM_USERNAME:$HELM_PASSWORD --request DELETE --silent --show-error \
                  https://$HELM_OCI_REGISTRY/api/v2.0/projects/$HELM_OCI_REPOSITORY/repositories/$name/artifacts/$removeFrom/tags/0.0.0
              fi
            
              echo "Create new develop tag 0.0.0"
              curl --user $HELM_USERNAME:$HELM_PASSWORD --request POST --header "Content-Type: application/json" \
                --silent --show-error --data '{"name":"0.0.0"}' \
                https://$HELM_OCI_REGISTRY/api/v2.0/projects/$HELM_OCI_REPOSITORY/repositories/$name/artifacts/$digest/tags
            fi
          }
          
          # we need to release the charts in the correct order because of dependencies
          # first is the library chart
          
          # check if the library chart has changed
          if [[ $changed_charts == *"charts/czertainly-lib"* ]]; then
            echo "charts/czertainly-lib has changed, releasing it first"
            release_chart charts/czertainly-lib
            # remove the library chart from the list of changed charts
            changed_charts=$(echo $changed_charts | sed s:charts/czertainly-lib::)
          fi
          
          umbrella_changed=false
          # czertainly umbrella chart must be released as last one
          if [[ $changed_charts == *"charts/czertainly"* ]]; then
            echo "charts/czertainly has changed, mark to released it as last"
            umbrella_changed=true
            # remove the umbrella chart from the list of changed charts
            changed_charts=$(echo $changed_charts | sed s:charts/czertainly::)
          fi
          
          # release all other charts, there should not be any dependency conflict
          for CHART in $changed_charts
          do
            echo "Releasing $CHART"
            release_chart $CHART
          done
          
          # when the umbrella chart has changed, release it as last one
          if [[ $umbrella_changed == "true" ]]; then
            echo "Releasing charts/czertainly"
            release_chart charts/czertainly
          fi
          
          echo "Logging out from $HELM_OCI_REGISTRY"
          helm registry logout $HELM_OCI_REGISTRY
