{{- if and (.Values.registerAdmin.enabled) (eq .Values.registerAdmin.source "generated") }}
{{- $jobName := "register-admin-job" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-{{ $jobName }}"
  labels:
    {{- include "czertainly.labels" . | nindent 4 }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-{{ $jobName }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      {{- include "czertainly.imagePullSecrets" . | indent 6 }}
      serviceAccountName: {{ include "czertainly.serviceAccountName" . }}
      restartPolicy: Never
      containers:
        - name: {{ $jobName }}
          image: {{ include "czertainly.kubectl.image" . }}
          imagePullPolicy: {{ .Values.kubectl.image.pullPolicy }}
          {{- if .Values.kubectl.image.securityContext }}
          securityContext: {{- .Values.kubectl.image.securityContext | toYaml | nindent 12 }}
          {{- end }}
          command:
          - /bin/sh
          - -c
          - |
            cat /opt/trusted-certs/cert-admin-ca.pem >> /tmp/new-trust.pem &&
            cat /opt/czertainly/trusted-certificates.pem >> /tmp/new-trust.pem &&
            kubectl patch secret trusted-certificates -p='{"data":{"ca.crt": "'$( cat /tmp/new-trust.pem | base64 -w 0 )'"}}' &&
            kubectl rollout restart deployment core-deployment &&
            {{- if not (lookup "v1" "Secret" .Release.Namespace "admin-secret") }}
            PASS={{ randAlphaNum 20 }} &&
            openssl pkcs12 -export -out /tmp/admin.p12 -in /opt/admin-certificate/tls.crt -inkey /opt/admin-certificate/tls.key -passout pass:$PASS &&
            kubectl create secret generic admin-secret --from-file=pkcs12=/tmp/admin.p12 --from-literal=password=$PASS
            {{- end }}
          volumeMounts:
            - name: trusted-certificates-volume
              mountPath: /opt/czertainly/
            - name: admin-ca-volume
              mountPath: /opt/trusted-certs/
            - name: admin-certificate-volume
              mountPath: /opt/admin-certificate/
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: trusted-certificates-volume
          secret:
            secretName: trusted-certificates
            items:
            - key: ca.crt
              path: trusted-certificates.pem
        - name: admin-ca-volume
          secret:
            secretName: admin-ca-keypair
            items:
              - key: tls.crt
                path: cert-admin-ca.pem
        - name: admin-certificate-volume
          secret:
            secretName: admin-certificate-secret
        - name: ephemeral
          {{- include "czertainly.ephemeralVolume" . | indent 10 }}
{{- end }}