# Default values for czertainly.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global parameters that will overwrite local parameters
global:
  config:
    enabled: true
  image:
    registry: ""
    repository: ""
    # array of secret names
    pullSecrets: []
  volumes:
    ephemeral:
      type: ""
      sizeLimit: ""
      storageClassName: ""
      custom: {}
  database:
    # currently only postgresql is supported
    type: ""
    host: ""
    port: ""
    name: ""
    username: ""
    password: ""
  trusted:
    certificates: ""
  httpProxy: ""
  httpsProxy: ""
  noProxy: ""
  hostName: ""
  keycloak:
    enabled: false
    # client secret must be set if keycloak is enabled
    clientSecret: ""
  messaging:
    remoteAccess: false
  utils:
    enabled: false
  admin:
    username: ""
    password: ""
    name: ""
    surname: ""
    email: ""
  # additional init containers that will be added to each pod
  # - name: some-image
  #   image: some-image
  #   imagePullPolicy: IfNotPresent
  #   securityContext:
  #     runAsNonRoot: true
  #   ports:
  #     - name: port
  #       containerPort: "{{ $.Values.container.port }}"
  initContainers: []
  # additional sidecar containers that will be added to each pod
  # see the sample of init containers above
  sidecarContainers: []
  # additional volumes that will be added to each pod
  # - name: additional-volume
  #   configMap:
  #     name: additional-volume
  additionalVolumes: []
  # additional volume mounts that will be added to each pod
  # - name: additional-volume
  #   mountPath: /opt/app
  #   readOnly: true
  additionalVolumeMounts: []
  # additional service ports that will be added to each pod
  # - name: other-port
  #   port: 8080
  #   targetPort: 8080
  additionalPorts: []
  # additional environment variables that will be added to each pod
  additionalEnv:
    # - name: SOME_ENV
    #   value: "some-value"
    variables: []
    # list of config maps to be added as environment variables
    configMaps: []
    # list of secrets to be added as environment variables
    secrets: []

database:
  # currently only postgresql is supported
  type: "postgresql"
  host: "host.docker.internal"
  port: 5432
  name: "czertainlydb"
  username: "czertainlyuser"
  password: "your-strong-password"
trusted:
  # CZERTAINLY Dummy Root CA
  certificates: |
    -----BEGIN CERTIFICATE-----
    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
    -----END CERTIFICATE-----
httpProxy: ""
httpsProxy: ""
noProxy: ""

nameOverride: ""
fullnameOverride: ""

registerAdmin:
  enabled: true
  admin:
    # PEM encoded certificate without chain
    certificate: |
      -----BEGIN CERTIFICATE-----
      MIIEtDCCApygAwIBAgIVAP15kVt62m8a4p52xmbCcNCiSx8qMA0GCSqGSIb3DQEB
      DQUAMCMxITAfBgNVBAMMGENaRVJUQUlOTFkgRHVtbXkgUm9vdCBDQTAeFw0yMjA4
      MDQwODEzMzFaFw00MjA3MzAwODEzMzFaMCMxITAfBgNVBAMMGENaRVJUQUlOTFkg
      QWRtaW5pc3RyYXRvcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL/P
      WoJN2ieDZkp1JggrXjhDm/xrqX6acAmyqzBQujCUrbjFF8l1qdtI0fZyFrZBLeVH
      CwqQUz0Afjzj7FBMNP2ljVLrQbMfyjJG10NvuPOa9dP/VolgF4CRRg0Ebg5CCd0s
      3yZR/gIc6cl9x0Ruk8uRCpM4jZ7Y+/7jhf4+c8mBlp2aRlAJtV3JOYQlux17IpJd
      JrngX/lKoZcp4zU9kQwunVxz5GBWhXGqMEcV6b7lGF5ocSlnrR3cUKZbdGbXcfK7
      5+W4/LB6v6y9bR40R+IUd/mOuByQvqWyTCk5d2YWBmg/ddPVFynb5a2+xjhJxBI+
      28iGXq6iroQrPouacv8CAwEAAaOB3jCB2zAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB
      /wQEAwIF4DATBgNVHSUEDDAKBggrBgEFBQcDAjAdBgNVHQ4EFgQUrUOz2v0EvBSH
      yemGXPnt7HaghBgwHwYDVR0jBBgwFoAU0/BNVjrmoD8XW/NVXeoxTIkD59YwZgYD
      VR0gBF8wXTBbBgRVHSAAMFMwUQYIKwYBBQUHAgIwRRpDVVRGODpUaGlzIGlzIGEg
      ZHVtbXkgYWRtaW5pc3RyYXRvciBjZXJ0aWZpY2F0ZSBmb3IgdGVzdGluZyBwdXJw
      b3NlczANBgkqhkiG9w0BAQ0FAAOCAgEAWYlpEI8SCOnhKYpcp3n+BtaAoUrcwIck
      pzPPxNf+9LSKhPp4NEs+EGsfflz33IeEojck+x/wBqggJdp7WrUsHz/0sAwCkrVj
      bh3Lx75msAqVqFUaX0gYbqstmbnHxqgcmseVkWmEHEOmdz0+/B0XrGagzQNW8EGW
      3PEv4yOCeqdgRt9Nyh+GUtVkavy+CkYRaIEHDGjtxJTMakXOaEU0tNmDoMBDQzLs
      qc75AYEeqlKvQs6vZICf+RltDaDgriSelE04PtjnIr6aKmWipFN2Wu8Zgi3qt7SS
      iMwk0OIvG4NGkOKckf5kRWlA6aLtkY2ABHObknIlJhfpU/sNN/5ma0c+rSXK2+Py
      DStxALMzM54GVfGpXmdR3fkEQ8mS35BU2l8Gp0mA/Xi55eqWVXgxEDXph487O20H
      jGh+xHcI40ZObBIKvfD0kCi1sQcINpK6CGm0Jb1ojU+xFwgq2IhdJPrC7quEW3wE
      HCRQKGaTbSm6CfMdf3YOKgpIUrX5Da2wJN04RTOLxUvpQss/rup49Uq2pMGBPtAv
      tTzXyTJrw22bgBjJV+jt60ZB0PVqRbaPa52hUMl7ewCGpVO2ByAcxoQ1+Enb28/S
      wDnW3rgsaCHOB0AzqzaQAwEbgAeUKDBxKwm0GqLIgMtGs7CaG58/KqZsMj8ADqqI
      tY3XXAlhjb4=
      -----END CERTIFICATE-----
    username: "czertainly-admin"
    password: "your-strong-password"
    name: "admin"
    surname: "admin"
    email: "admin@czertainly.local"
    description: "CZERTAINLY Admin"
  # options: generated, external
  source: external

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
replicaCount: 1

service:
  type: "ClusterIP"
  port: 8080

image:
  # default registry name
  registry: docker.io
  repository: 3keycompany
  name: czertainly-core
  tag: 2.12.0
  # the digest to be used instead of the tag
  digest: ""
  pullPolicy: IfNotPresent
  # array of secret names
  pullSecrets: []
  # default security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 10001
    readOnlyRootFilesystem: true
  # probes configuration
  probes:
    liveness:
      enabled: false
      # custom probe command, will override the default one
      custom: {}
      initialDelaySeconds: 60
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    readiness:
      enabled: true
      # custom probe command, will override the default one
      custom: {}
      initialDelaySeconds: 15
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    startup:
      enabled: true
      # custom probe command, will override the default one
      custom: {}
      initialDelaySeconds: 15
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 45
  resources: {}
    # We follow recommendations and general guidelines to manage resources from:
    # https://master.sdk.operatorframework.io/docs/best-practices/managing-resources/
    # We recommend default requests for CPU and Memory, leaving the limits as a conscious
    # choice for the user. If you do want to specify your own resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources'.
    # requests:
    #   cpu: 200m
    #   memory: 2000M
    # limits: {}

volumes:
  ephemeral:
    # available types are: memory, storage, custom
    type: memory
    sizeLimit: "1Mi"
    storageClassName: ""
    custom: {}
    #  emptyDir:
    #    sizeLimit: "10Mi"
    #    medium: "Memory"

curl:
  image:
    # default registry name
    registry: docker.io
    repository: curlimages
    name: curl
    tag: 8.1.1
    # the digest to be used instead of the tag
    digest: ""
    pullPolicy: IfNotPresent
    # array of secret names
    pullSecrets: []
    # default security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 100
      readOnlyRootFilesystem: true
    # it does not make sense to have probes for curl

kubectl:
  image:
    # default registry name
    registry: docker.io
    repository: bitnami
    name: kubectl
    tag: 1.27.3
    # the digest to be used instead of the tag
    digest: ""
    pullPolicy: IfNotPresent
    # array of secret names
    pullSecrets: []
    # default security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      readOnlyRootFilesystem: true
    # it does not make sense to have probes for kubectl

opa:
  image:
    # default registry name
    registry: docker.io
    repository: openpolicyagent
    name: opa
    tag: 0.53.0-rootless
    # the digest to be used instead of the tag
    digest: ""
    pullPolicy: IfNotPresent
    # array of secret names
    pullSecrets: []
    # default security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      readOnlyRootFilesystem: true
    # probes configuration
    probes:
      liveness:
        enabled: false
        # custom probe command, will override the default one
        custom: {}
        initialDelaySeconds: 5
        timeoutSeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      readiness:
        enabled: true
        # custom probe command, will override the default one
        custom: {}
        initialDelaySeconds: 5
        timeoutSeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      startup:
        enabled: false
        # custom probe command, will override the default one
        custom: {}
        initialDelaySeconds: 5
        timeoutSeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 3
    resources: {}
      # We follow recommendations and general guidelines to manage resources from:
      # https://master.sdk.operatorframework.io/docs/best-practices/managing-resources/
      # We recommend default requests for CPU and Memory, leaving the limits as a conscious
      # choice for the user. If you do want to specify your own resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources'.
      # requests:
      #   cpu: 50m
      #   memory: 150M
      # limits: {}

# customization of the chart
initContainers: []
sidecarContainers: []
additionalVolumes: []
additionalVolumeMounts: []
additionalPorts: []
additionalEnv:
  variables: []
  configMaps: []
  secrets: []

logging:
  level: "INFO"
  audit:
    enabled: "false"

javaOpts: ""

auth:
  header:
    token: "X-USERINFO"
    certificate: "X-APP-CERTIFICATE"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "czertainly-sa"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

certManager:
  version: ""

hostName: "czertainly.local"

letsEncrypt:
  # email: notifications@sample.com
  environment: production

ingress:
  enabled: false
  certificate:
    # options: internal, external, letsencrypt
    source: internal
  # options: traefik, nginx
  class: nginx
  annotations: {
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP",
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional",
    nginx.ingress.kubernetes.io/auth-tls-secret: "czertainly/trusted-certificates",
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "3",
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true",
    nginx.ingress.kubernetes.io/proxy-buffer-size: 256k
  }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTP",
    # nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional",
    # nginx.ingress.kubernetes.io/auth-tls-secret: "czertainly/ingress-ca-secret",
    # nginx.ingress.kubernetes.io/auth-tls-verify-depth: "3",
    # nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
  # hosts:
  #  - host: czertainly.local
  #    paths:
  #      - path: /
  #        pathType: Prefix
  tls:
    secretName: czertainly-ingress-tls
  #  - secretName: czertainly.local-tls
  #    hosts:
  #      - czertainly.local

nodeSelector: {}

tolerations: []

affinity: {}

#
# dependencies management
#
apiGateway:
  nameOverride: api-gateway
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  replicaCount: 1
  service:
    type: "ClusterIP"
    consumer:
      port: 8000
  trustedIps: ""

feAdministrator:
  nameOverride: fe-administrator
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  replicaCount: 1
  service:
    type: "ClusterIP"
    port: 8080
  podAnnotations: {}

authService:
  nameOverride: auth-service

authOpaPolicies:
  nameOverride: auth-opa-policies

messagingService:
  nameOverride: messaging-service

schedulerService:
  nameOverride: scheduler-service

#
# connectors
#
registerConnectors: true

commonCredentialProvider:
  nameOverride: common-credential-provider
  enabled: true

ejbcaNgConnector:
  nameOverride: ejbca-ng-connector
  enabled: false

pyAdcsConnector:
  nameOverride: pyadcs-connector
  enabled: false

msAdcsConnector:
  nameOverride: ms-adcs-connector
  enabled: false

hashicorpVaultConnector:
  nameOverride: hashicorp-vault-connector
  enabled: false

x509ComplianceProvider:
  nameOverride: x509-compliance-provider
  enabled: false

cryptosenseDiscoveryProvider:
  nameOverride: cryptosense-discovery-provider
  enabled: false

networkDiscoveryProvider:
  nameOverride: network-discovery-provider
  enabled: false

keystoreEntityProvider:
  nameOverride: keystore-entity-provider
  enabled: false

softwareCryptographyProvider:
  nameOverride: software-cryptography-provider
  enabled: false

emailNotificationProvider:
  nameOverride: email-notification-provider
  enabled: false

#
# supportive optional components
#
keycloakInternal:
  nameOverride: keycloak-internal
  # the enabled flag is defined as global.keycloak.enabled

utilsService:
  nameOverride: utils-service
  # the enabled flag is defined as global.utils.enabled
